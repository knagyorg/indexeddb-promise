(function (f) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = f();
  } else if (typeof define === 'function' && define.amd) {
    define([], f);
  } else {
    var g;
    if (typeof window !== 'undefined') {
      g = window;
    } else if (typeof global !== 'undefined') {
      g = global;
    } else if (typeof self !== 'undefined') {
      g = self;
    } else {
      g = this;
    }
    g.IndexedDB = f();
  }
})(function () {
  var define, module, exports;
  return (function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = 'function' == typeof require && require;
            if (!f && c) return c(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw ((a.code = 'MODULE_NOT_FOUND'), a);
          }
          var p = (n[i] = { exports: {} });
          e[i][0].call(
            p.exports,
            function (r) {
              var n = e[i][1][r];
              return o(n || r);
            },
            p,
            p.exports,
            r,
            e,
            n,
            t,
          );
        }
        return n[i].exports;
      }
      for (var u = 'function' == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
      return o;
    }
    return r;
  })()(
    {
      1: [
        function (require, module, exports) {
          'use strict';

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });

          var ArraySorter =
            /** @class */
            (function () {
              function ArraySorter(listToBeSorted) {
                this.listToBeSorted = listToBeSorted;

                if (!Array.isArray(listToBeSorted)) {
                  throw new Error('The list to be sorted must be an array');
                }
              }

              ArraySorter.prototype.sortBy = function (props) {
                var _this = this;

                if (props === void 0) {
                  props = null;
                }

                var ref = {
                  sorted: this.listToBeSorted,
                  keys: null,
                };
                if (props === null || props === void 0 ? void 0 : props.hasOwnProperty('keys')) ref.keys = props.keys;
                if (typeof props === 'string') ref.keys = [props];

                if (Array.isArray(ref.keys)) {
                  ref.keys.forEach(function (key) {
                    ref.sorted = _this.sortListOfObjects(ref.sorted, key);
                  });
                } else {
                  ref.sorted = this.sortPlainList(ref.sorted);
                }

                if ((props === null || props === void 0 ? void 0 : props.hasOwnProperty('desc')) && props.desc) {
                  ref.sorted = ref.sorted.reverse();
                }

                return ref.sorted;
              };

              ArraySorter.prototype.sortPlainList = function (data) {
                return data.sort(function (next, current) {
                  var _a, _b, _c, _d; // Sorting by number key

                  if (!isNaN(current) && !isNaN(next)) {
                    return next - current;
                  } // Alphabetical sorting

                  if (
                    ((_a = current) === null || _a === void 0 ? void 0 : _a.toLowerCase()) >
                    ((_b = next) === null || _b === void 0 ? void 0 : _b.toLowerCase())
                  )
                    return -1;
                  if (
                    ((_c = current) === null || _c === void 0 ? void 0 : _c.toLowerCase()) <
                    ((_d = next) === null || _d === void 0 ? void 0 : _d.toLowerCase())
                  )
                    return 1;
                  return 0;
                });
              };

              ArraySorter.prototype.sortListOfObjects = function (data, key) {
                return data.sort(function (next, current) {
                  var _a, _b, _c, _d; // Sorting by number key

                  if (!isNaN(current[key]) && !isNaN(next[key])) {
                    return next[key] - current[key];
                  } // Sorting by date key

                  if (!isNaN(new Date(current[key]).valueOf())) {
                    var $current = new Date(current[key]).valueOf();
                    var $next = {
                      val: new Date(0).valueOf(),
                    };

                    if (!isNaN(new Date(next[key]).valueOf())) {
                      $next.val = new Date(next[key]).valueOf();
                    }

                    if ($current > $next.val) return -1;
                    if ($current < $next.val) return 1;
                    return 0;
                  } // Alphabetical sorting

                  if (
                    ((_a = current[key]) === null || _a === void 0 ? void 0 : _a.toLowerCase()) >
                    ((_b = next[key]) === null || _b === void 0 ? void 0 : _b.toLowerCase())
                  )
                    return -1;
                  if (
                    ((_c = current[key]) === null || _c === void 0 ? void 0 : _c.toLowerCase()) <
                    ((_d = next[key]) === null || _d === void 0 ? void 0 : _d.toLowerCase())
                  )
                    return 1;
                  return 0;
                });
              };

              return ArraySorter;
            })();

          exports.default = ArraySorter;
        },
        {},
      ],
      2: [
        function (require, module, exports) {
          'use strict';

          var __assign =
            (void 0 && (void 0).__assign) ||
            function () {
              __assign =
                Object.assign ||
                function (t) {
                  for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];

                    for (var p in s) {
                      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                  }

                  return t;
                };

              return __assign.apply(this, arguments);
            };

          var __awaiter =
            (void 0 && (void 0).__awaiter) ||
            function (thisArg, _arguments, P, generator) {
              function adopt(value) {
                return value instanceof P
                  ? value
                  : new P(function (resolve) {
                      resolve(value);
                    });
              }

              return new (P || (P = Promise))(function (resolve, reject) {
                function fulfilled(value) {
                  try {
                    step(generator.next(value));
                  } catch (e) {
                    reject(e);
                  }
                }

                function rejected(value) {
                  try {
                    step(generator['throw'](value));
                  } catch (e) {
                    reject(e);
                  }
                }

                function step(result) {
                  result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
                }

                step((generator = generator.apply(thisArg, _arguments || [])).next());
              });
            };

          var __generator =
            (void 0 && (void 0).__generator) ||
            function (thisArg, body) {
              var _ = {
                  label: 0,
                  sent: function sent() {
                    if (t[0] & 1) throw t[1];
                    return t[1];
                  },
                  trys: [],
                  ops: [],
                },
                f,
                y,
                t,
                g;
              return (
                (g = {
                  next: verb(0),
                  throw: verb(1),
                  return: verb(2),
                }),
                typeof Symbol === 'function' &&
                  (g[Symbol.iterator] = function () {
                    return this;
                  }),
                g
              );

              function verb(n) {
                return function (v) {
                  return step([n, v]);
                };
              }

              function step(op) {
                if (f) throw new TypeError('Generator is already executing.');

                while (_) {
                  try {
                    if (
                      ((f = 1),
                      y &&
                        (t =
                          op[0] & 2
                            ? y['return']
                            : op[0]
                            ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                            : y.next) &&
                        !(t = t.call(y, op[1])).done)
                    )
                      return t;
                    if (((y = 0), t)) op = [op[0] & 2, t.value];

                    switch (op[0]) {
                      case 0:
                      case 1:
                        t = op;
                        break;

                      case 4:
                        _.label++;
                        return {
                          value: op[1],
                          done: false,
                        };

                      case 5:
                        _.label++;
                        y = op[1];
                        op = [0];
                        continue;

                      case 7:
                        op = _.ops.pop();

                        _.trys.pop();

                        continue;

                      default:
                        if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                          _ = 0;
                          continue;
                        }

                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                          _.label = op[1];
                          break;
                        }

                        if (op[0] === 6 && _.label < t[1]) {
                          _.label = t[1];
                          t = op;
                          break;
                        }

                        if (t && _.label < t[2]) {
                          _.label = t[2];

                          _.ops.push(op);

                          break;
                        }

                        if (t[2]) _.ops.pop();

                        _.trys.pop();

                        continue;
                    }

                    op = body.call(thisArg, _);
                  } catch (e) {
                    op = [6, e];
                    y = 0;
                  } finally {
                    f = t = 0;
                  }
                }

                if (op[0] & 5) throw op[1];
                return {
                  value: op[0] ? op[1] : void 0,
                  done: true,
                };
              }
            };

          var __asyncValues =
            (void 0 && (void 0).__asyncValues) ||
            function (o) {
              if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
              var m = o[Symbol.asyncIterator],
                i;
              return m
                ? m.call(o)
                : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
                  (i = {}),
                  verb('next'),
                  verb('throw'),
                  verb('return'),
                  (i[Symbol.asyncIterator] = function () {
                    return this;
                  }),
                  i);

              function verb(n) {
                i[n] =
                  o[n] &&
                  function (v) {
                    return new Promise(function (resolve, reject) {
                      (v = o[n](v)), settle(resolve, reject, v.done, v.value);
                    });
                  };
              }

              function settle(resolve, reject, d, v) {
                Promise.resolve(v).then(function (v) {
                  resolve({
                    value: v,
                    done: d,
                  });
                }, reject);
              }
            };

          var __importDefault =
            (void 0 && (void 0).__importDefault) ||
            function (mod) {
              return mod && mod.__esModule
                ? mod
                : {
                    default: mod,
                  };
            };

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          exports.Database = void 0;

          var array_sorter_1 = __importDefault(require('./array-sorter'));

          var Database =
            /** @class */
            (function () {
              function Database(config) {
                var _this = this;

                var _a;

                this.config = config;
                this.databaseName = 'DefaultDatabase';
                this.tables = ['DefaultTable'];
                this.databaseVersion = 1;
                this.activeTableName = 'DefaultTable';

                if (Array.isArray(config)) {
                  throw new Error('Config has to be an Object');
                }

                this.tables =
                  (_a = config.tables) === null || _a === void 0
                    ? void 0
                    : _a.map(function (table) {
                        return table.name;
                      });
                this.databaseName = config.name;
                this.databaseVersion = config.version;
                this.connection = new Promise(function (resolve, reject) {
                  if (!window || !('indexedDB' in window) || !('open' in window.indexedDB)) {
                    return reject('Unsupported environment');
                  }

                  var request = window.indexedDB.open(_this.databaseName, _this.databaseVersion);

                  request.onerror = function () {
                    return reject(request.error);
                  };

                  request.onsuccess = function () {
                    var connection = request.result;

                    connection.onversionchange = function () {
                      connection.close();
                      console.info('connection closed...');
                    };

                    return resolve(connection);
                  };

                  request.onblocked = function () {
                    request.result.close();
                    console.error(request.error || 'Database blocked');
                  };

                  request.onupgradeneeded = function (event) {
                    return Database.onUpgradeNeeded(request.result, config, event.oldVersion);
                  };
                });
              }

              Database.onUpgradeNeeded = function (db, database, oldVersion) {
                var e_1, _a;

                var _b, _c;

                return __awaiter(this, void 0, void 0, function () {
                  var _d, _e, table, store, key, _i, _f, data, _g, _h, e_1_1;

                  return __generator(this, function (_j) {
                    switch (_j.label) {
                      case 0:
                        _j.trys.push([0, 8, 9, 14]);

                        _d = __asyncValues(database.tables);
                        _j.label = 1;

                      case 1:
                        return [
                          4,
                          /*yield*/
                          _d.next(),
                        ];

                      case 2:
                        if (!((_e = _j.sent()), !_e.done))
                          return [
                            3, /*break*/
                            7,
                          ];
                        table = _e.value;

                        if ((oldVersion < database.version && oldVersion) || db.objectStoreNames.contains(table.name)) {
                          db.deleteObjectStore(table.name);
                          console.info('DB version changed, removing table: ' + table.name + ' for the fresh start');
                        }

                        store = db.createObjectStore(table.name, {
                          keyPath: ((_b = table.primaryKey) === null || _b === void 0 ? void 0 : _b.name) || 'id',
                          autoIncrement:
                            ((_c = table.primaryKey) === null || _c === void 0 ? void 0 : _c.autoIncrement) || true,
                        });

                        for (key in table.indexes) {
                          if (key in table.indexes) {
                            store.createIndex(key, key, {
                              unique: !!table.indexes[key].unique,
                              multiEntry: !!table.indexes[key].multiEntry,
                            });
                          }
                        }

                        (_i = 0),
                          (_f = (table.initData || []).map(function (item) {
                            return __assign(
                              __assign({}, item),
                              table.timestamps && {
                                createdAt: Date.now(),
                                updatedAt: Date.now(),
                              },
                            );
                          }));
                        _j.label = 3;

                      case 3:
                        if (!(_i < _f.length))
                          return [
                            3, /*break*/
                            6,
                          ];
                        data = _f[_i];
                        _h = (_g = store).add;
                        return [
                          4,
                          /*yield*/
                          Database.verify(data, database),
                        ];

                      case 4:
                        _h.apply(_g, [_j.sent()]);

                        _j.label = 5;

                      case 5:
                        _i++;
                        return [
                          3, /*break*/
                          3,
                        ];

                      case 6:
                        return [
                          3, /*break*/
                          1,
                        ];

                      case 7:
                        return [
                          3, /*break*/
                          14,
                        ];

                      case 8:
                        e_1_1 = _j.sent();
                        e_1 = {
                          error: e_1_1,
                        };
                        return [
                          3, /*break*/
                          14,
                        ];

                      case 9:
                        _j.trys.push([9, , 12, 13]);

                        if (!(_e && !_e.done && (_a = _d.return)))
                          return [
                            3, /*break*/
                            11,
                          ];
                        return [
                          4,
                          /*yield*/
                          _a.call(_d),
                        ];

                      case 10:
                        _j.sent();

                        _j.label = 11;

                      case 11:
                        return [
                          3, /*break*/
                          13,
                        ];

                      case 12:
                        if (e_1) throw e_1.error;
                        return [
                          7,
                          /*endfinally*/
                        ];

                      case 13:
                        return [
                          7,
                          /*endfinally*/
                        ];

                      case 14:
                        return [
                          2,
                          /*return*/
                        ];
                    }
                  });
                });
              };
              /**
               * @description This method is used to get the indexes of the table, verify and return it.
               */

              Database.verify = function (data, config) {
                return __awaiter(this, void 0, void 0, function () {
                  return __generator(this, function (_a) {
                    return [
                      2,
                      /*return*/
                      new Promise(function (resolve, reject) {
                        var keys = Object.keys(data);
                        config.tables.forEach(function (table) {
                          var _a, _b;

                          if (
                            ((_a = table.primaryKey) === null || _a === void 0 ? void 0 : _a.autoIncrement) === false
                          ) {
                            if (!keys.includes((_b = table.primaryKey) === null || _b === void 0 ? void 0 : _b.name)) {
                              return reject('Either include primary key as well or set {autoincrement: true}.');
                            }
                          }
                        });
                        return resolve(data);
                      }),
                    ];
                  });
                });
              };

              Database.prototype.setTable = function (table) {
                var _this = this;

                if (!this.tables.includes(table)) {
                  throw new Error('Table ' + table + ' does not exist');
                }

                this.activeTableName = table;
                this.activeTableDetails = this.config.tables.find(function (_a) {
                  var name = _a.name;
                  return name === _this.activeTableName;
                });
                return this;
              };
              /**
               * @description This method is used to insert data into the table.
               */

              Database.prototype.insert = function (data) {
                return __awaiter(this, void 0, void 0, function () {
                  var _this = this;

                  return __generator(this, function (_a) {
                    return [
                      2,
                      /*return*/
                      new Promise(function (resolve, reject) {
                        return __awaiter(_this, void 0, void 0, function () {
                          var verifiedInsertData_1, _a, e_2;

                          var _this = this;

                          return __generator(this, function (_b) {
                            switch (_b.label) {
                              case 0:
                                _b.trys.push([0, 2, , 3]);

                                _a = [{}];
                                return [
                                  4,
                                  /*yield*/
                                  Database.verify(data, this.config),
                                ];

                              case 1:
                                verifiedInsertData_1 = __assign.apply(void 0, [
                                  __assign.apply(void 0, _a.concat([_b.sent()])),
                                  this.activeTableDetails.timestamps && {
                                    createdAt: Date.now(),
                                    updatedAt: Date.now(),
                                  },
                                ]);
                                this.connection.then(function (db) {
                                  var request = db
                                    .transaction(_this.tables, 'readwrite')
                                    .objectStore(_this.activeTableName)
                                    .add(verifiedInsertData_1);

                                  request.onsuccess = function () {
                                    return resolve(data);
                                  };

                                  request.onerror = function () {
                                    return reject(request.error || 'Unable to add data. Check the unique values');
                                  };
                                });
                                return [
                                  3, /*break*/
                                  3,
                                ];

                              case 2:
                                e_2 = _b.sent();
                                return [
                                  2,
                                  /*return*/
                                  reject(e_2),
                                ];

                              case 3:
                                return [
                                  2,
                                  /*return*/
                                ];
                            }
                          });
                        });
                      }),
                    ];
                  });
                });
              };
              /**
               * @description This method is used to select data from the table by Primary key.
               */

              Database.prototype.selectByPk = function (pKey) {
                return __awaiter(this, void 0, void 0, function () {
                  var _this = this;

                  return __generator(this, function (_a) {
                    return [
                      2,
                      /*return*/
                      new Promise(function (resolve, reject) {
                        _this.connection.then(function (db) {
                          var transaction = db.transaction(_this.tables);
                          var objectStore = transaction.objectStore(_this.activeTableName);
                          var request = objectStore.get(pKey);

                          request.onerror = function () {
                            return reject(request.error || 'Unable to retrieve data from the model');
                          };

                          request.onsuccess = function () {
                            return resolve(request.result);
                          };
                        });
                      }),
                    ];
                  });
                });
              };
              /**
               * @description This method is used to select data from the table by defined Index key.
               */

              Database.prototype.selectByIndex = function (indexName, value) {
                return __awaiter(this, void 0, void 0, function () {
                  var _this = this;

                  return __generator(this, function (_a) {
                    return [
                      2,
                      /*return*/
                      new Promise(function (resolve, reject) {
                        _this.connection.then(function (db) {
                          var transaction = db.transaction(_this.tables);
                          var objectStore = transaction.objectStore(_this.activeTableName);
                          var request = objectStore.index(indexName).get(value);

                          request.onerror = function () {
                            return reject(request.error || 'Unable to retrieve data from the model by ' + indexName);
                          };

                          request.onsuccess = function () {
                            return resolve(request.result);
                          };
                        });
                      }),
                    ];
                  });
                });
              };
              /**
               * @description This method is used to select all the data from the table.
               */

              Database.prototype.selectAll = function () {
                return __awaiter(this, void 0, void 0, function () {
                  var _this = this;

                  return __generator(this, function (_a) {
                    return [
                      2,
                      /*return*/
                      new Promise(function (resolve, reject) {
                        _this.connection.then(function (db) {
                          var objectStore = db.transaction(_this.tables).objectStore(_this.activeTableName);
                          var request = objectStore.getAll();

                          request.onsuccess = function () {
                            return resolve(request.result);
                          };

                          request.onerror = function () {
                            return reject(request.error || "Can't get data from database");
                          };
                        });
                      }),
                    ];
                  });
                });
              };
              /**
               * @description This method is used to select data from the table.
               */

              Database.prototype.select = function (options) {
                return __awaiter(this, void 0, void 0, function () {
                  return __generator(this, function (_a) {
                    return [
                      2,
                      /*return*/
                      this.selectAll().then(function (data) {
                        var result = [];

                        if (Reflect.has(options, 'where') && options.where) {
                          if (!data) return [];

                          if (typeof options.where === 'function') {
                            result = options.where(data);
                          } else {
                            var whereKeys_1 = Object.keys(options.where);
                            result = data.filter(function (item) {
                              var dataKeys = Object.keys(item);

                              for (var _i = 0, whereKeys_2 = whereKeys_1; _i < whereKeys_2.length; _i++) {
                                var key = whereKeys_2[_i];

                                if (dataKeys.includes(key) && item[key] === options.where[key]) {
                                  return true;
                                }
                              }

                              return false;
                            });
                          }
                        }

                        if (Reflect.has(options, 'sortBy') && options.sortBy) {
                          // sort data
                          result = new array_sorter_1.default(result).sortBy({
                            desc: Reflect.has(options, 'orderByDESC') && options.orderByDESC,
                            keys: [options.sortBy],
                          });
                        }

                        if (Reflect.has(options, 'limit') && options.limit) {
                          // slice data
                          result = result.slice(0, +options.limit);
                        }

                        return result;
                      }),
                    ];
                  });
                });
              };
              /**
               * @description This method is used to update data in the table by primary key.
               * It combines original and updateData and the same keys will be overridden.
               */

              Database.prototype.updateByPk = function (pKey, dataToUpdate) {
                var _this = this;

                return new Promise(function (resolve, reject) {
                  _this.connection.then(function (db) {
                    _this.selectByPk(pKey).then(function (fetchedData) {
                      var transaction = db.transaction(_this.tables, 'readwrite');
                      var store = transaction.objectStore(_this.activeTableName);
                      var data = Object.assign(fetchedData, dataToUpdate);
                      if (_this.activeTableDetails.timestamps) data.createdAt = Date.now();
                      var save = store.put(data);

                      save.onsuccess = function () {
                        return resolve(data);
                      };

                      save.onerror = function () {
                        return reject(save.error || "Couldn't update data");
                      };
                    });
                  });
                });
              };
              /**
               * @description This method is used to delete data from the table.
               */

              Database.prototype.deleteByPk = function (pKey) {
                var _this = this;

                return new Promise(function (resolve, reject) {
                  _this.connection.then(function (db) {
                    var transaction = db.transaction(_this.tables, 'readwrite');
                    var request = transaction.objectStore(_this.activeTableName).delete(pKey);

                    request.onsuccess = function () {
                      return resolve(pKey);
                    };

                    request.onerror = function () {
                      return reject(request.error || "Couldn't remove an item");
                    };
                  });
                });
              };

              Database.removeDatabase = function (name) {
                return __awaiter(this, void 0, void 0, function () {
                  return __generator(this, function (_a) {
                    return [
                      2,
                      /*return*/
                      new Promise(function (resolve, reject) {
                        var request = window.indexedDB.deleteDatabase(name);

                        request.onblocked = function () {
                          console.log("Couldn't delete database due to the operation being blocked");
                        };

                        request.onsuccess = function () {
                          return resolve('Database has been removed');
                        };

                        request.onerror = function () {
                          return reject(request.error || "Couldn't remove database");
                        };
                      }),
                    ];
                  });
                });
              };

              return Database;
            })();

          exports.Database = Database;
        },
        { './array-sorter': 1 },
      ],
    },
    {},
    [2],
  )(2);
});
